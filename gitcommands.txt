git init(directoy)  --Create empty Git repo in specified directory. Run with no
arguments to initialize the current directory as a git repository

git clone<repo>  --Clone repo located at <repo> onto local machine. Original repo can be
located on the local filesystem or on a remote machine via HTTP or SSH.

git add(directory)  --Stage all changes in <directory> for the next commit.
Replace <directory> with a <file> to change a specific file.

git commit -m  ---Commit the staged snapshot, but instead of launching
a text editor, use <message> as the commit message.

git status  --List which files are staged, unstaged, and untracked.

git log   --Display the entire commit history using the default format.
For customization see additional options

git diff  ---Show unstaged changes between your index and working directory.

UNDO CHANGES
---------------------

git revert<commit>  --Create new commit that undoes all of the changes made in
<commit>, then apply it to the current branch

git reset <file>  -Remove <file> from the staging area, but leave the working directory
unchanged. This unstages a file without overwriting any changes.

git rebase  ---

GIT BRANCHES
------------------
git branch  --List all of the branches in your repo. Add a <branch> argument to
create a new branch with the name <branch>.

git checkout -b <branch> ----Create and check out a new branch named <branch>.
Drop the -b flag to checkout an existing branch.


git merge <branch>  --Merge <branch> into the current branch.

git branch new_branch  ---create new branch

git checkout new_branch   --to switch to new branch

git checkout -b test_branch  --shortcut to create and switch to new branch

git branch -D test_branch    ---to delete the branch

git branch -m new_branch abc_branch   ----to rename the branch(new branch to abc_branch -rename)



GIT REBASE
------------------------------------
The Git rebase command is a branch merge command, but the difference is that
it modifies the order of commits.
The Git merge command tries to put the commits from other branches on top of
the HEAD of the current local branch. For example, your local branch has
commits A−>B−>C−>D and the merge branch has commits A−>B−>X−>Y,
then git merge will convert the current local branch to something like
A−>B−>C−>D−>X−>Y.
The Git rebase command tries to find out the common ancestor between the
current local branch and the merge branch. It then pushes the commits to the
local branch by modifying the order of commits in the current local branch. For
example, if your local branch has commits A−>B−>C−>D and the merge branch
has commits A−>B−>X−>Y, then Git rebase will convert the current local
branch to something like A−>B−>X−>Y−>C−>D.
When multiple developers work on a single remote repository, you cannot
modify the order of the commits in the remote repository. In this situation, you
can use rebase operation to put your local commits on top of the remote
repository commits and you can push these changes.




